{
	"info": {
		"_postman_id": "faa80bed-af1d-466b-aa12-f3c9e6bc9b28",
		"name": "todoistapi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "projects",
			"item": [
				{
					"name": "get all projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"validate schema\", function () {",
									"    const expectedSchema = {",
									"        \"properties\":{",
									"            \"id\":{",
									"                \"type\":\"number\"",
									"            },",
									"            \"name\":{",
									"                \"type\":\"string\"",
									"            }",
									"        }",
									"    }",
									"    pm.response.to.have.jsonSchema(expectedSchema);",
									"});",
									"",
									"pm.test(\"Content-Type should exist and should contain application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.todoist.com/rest/v1/projects",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all projects negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response should be 404 not found\", function () {",
									"    pm.response.to.have.body(\"404 page not found\\n\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.todoist.com/rest/v1/projectst",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"projectst"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a new project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"project_id\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"validate schema\", function () {",
									"    const expectedSchema = {",
									"        \"properties\":{",
									"            \"id\":{",
									"                \"type\":\"number\"",
									"            },",
									"            \"name\":{",
									"                \"type\":\"string\"",
									"            }",
									"        }",
									"    }",
									"    pm.response.to.have.jsonSchema(expectedSchema);",
									"});",
									"",
									"pm.test(\"Project should be created with given name\", function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"projectName\"))",
									"});",
									"",
									"pm.test(\"Content-Type should exist and should contain application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.environment.unset(\"projectName\");",
									"pm.environment.unset(\"projectColor\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"projectName\", \"Shopping List2\");",
									"pm.environment.set(\"projectColor\", \"44\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://api.todoist.com/rest/v1/projects?name={{projectName}}&color={{projectColor}}",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"projects"
							],
							"query": [
								{
									"key": "name",
									"value": "{{projectName}}"
								},
								{
									"key": "color",
									"value": "{{projectColor}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create a new project negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"project should not be created with an empty name\", function () {",
									"    pm.response.to.have.body(\"Empty name\\n\");",
									"});",
									"",
									"pm.environment.unset(\"projectName\");",
									"pm.environment.unset(\"projectColor\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"projectName\", \"Shopping List2\");",
									"pm.environment.set(\"projectColor\", \"44\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://api.todoist.com/rest/v1/projects?name=&color={{projectColor}}",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"projects"
							],
							"query": [
								{
									"key": "name",
									"value": ""
								},
								{
									"key": "color",
									"value": "{{projectColor}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get a project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"validate schema\", function () {",
									"    const expectedSchema = {",
									"        \"properties\":{",
									"            \"id\":{",
									"                \"type\":\"number\"",
									"            },",
									"            \"name\":{",
									"                \"type\":\"string\"",
									"            }",
									"        }",
									"    }",
									"    pm.response.to.have.jsonSchema(expectedSchema);",
									"});",
									"",
									"pm.test(\"Project should have the given id\", function () {",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"project_id\"))",
									"});",
									"",
									"pm.test(\"Content-Type should exist and should contain application/json\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.todoist.com/rest/v1/projects/{{project_id}}",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"projects",
								"{{project_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get a project negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"project should have a valid id\", function () {",
									"    pm.response.to.have.body(\"Not Found\\n\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.todoist.com/rest/v1/projects/123",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"projects",
								"123"
							]
						}
					},
					"response": []
				},
				{
					"name": "update a project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Shofp\",\n    \"color\": 46\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.todoist.com/rest/v1/projects/{{project_id}}",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"projects",
								"{{project_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update a project negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"project should not be updated with an empty name\", function () {",
									"    pm.response.to.have.body(\"Empty name\\n\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"color\": 46\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.todoist.com/rest/v1/projects/{{project_id}}",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"projects",
								"{{project_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete a project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.todoist.com/rest/v1/projects/{{project_id}}",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"projects",
								"{{project_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete a project negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"response should be 404 not found\", function () {",
									"    pm.response.to.have.body(\"404 page not found\\n\");",
									"});",
									"pm.environment.set(\"project_id\",\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.todoist.com/rest/v1/projectd/{{project_id}}",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"projectd",
								"{{project_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "tasks",
			"item": [
				{
					"name": "get active tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"validate schema\", function () {",
									"    const expectedSchema = {",
									"        \"properties\":{",
									"            \"id\":{",
									"                \"type\":\"number\"",
									"            },",
									"            \"content\":{",
									"                \"type\":\"string\"",
									"            }",
									"        }",
									"    }",
									"    pm.response.to.have.jsonSchema(expectedSchema);",
									"});",
									"",
									"pm.test(\"Content-Type should exist and should contain application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "get active tasks negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.todoist.com/rest/v1/task",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a new task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"task_id\", jsonData.id);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"validate schema\", function () {",
									"    const expectedSchema = {",
									"        \"properties\":{",
									"            \"id\":{",
									"                \"type\":\"number\"",
									"            },",
									"            \"content\":{",
									"                \"type\":\"string\"",
									"            }",
									"        }",
									"    }",
									"    pm.response.to.have.jsonSchema(expectedSchema);",
									"});",
									"",
									"pm.test(\"Task should be created with given content\", function () {",
									"    pm.expect(jsonData.content).to.eql(pm.environment.get(\"taskContent\"))",
									"});",
									"",
									"pm.test(\"Content-Type should exist and should contain application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.environment.unset(\"taskContent\");",
									"pm.environment.unset(\"taskDescription\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"taskContent\", \"tasked\");",
									"pm.environment.set(\"taskDescription\", \"hello\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\":\"{{taskContent}}\",\n    \"description\":\"{{taskDescription}}\"\n}"
						},
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a new task negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"project should not be created with an empty content\", function () {",
									"    pm.response.to.have.body(\"Item content is empty\\n\");",
									"});",
									"",
									"",
									"pm.environment.unset(\"taskContent\");",
									"pm.environment.unset(\"taskDescription\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"taskContent\", \" \");",
									"pm.environment.set(\"taskDescription\", \"hello\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\":\" {{taskContent}}\",\n    \"description\":\"{{taskDescription}}\"\n}"
						},
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "get an active task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"validate schema\", function () {",
									"    const expectedSchema = {",
									"        \"properties\":{",
									"            \"id\":{",
									"                \"type\":\"number\"",
									"            },",
									"            \"name\":{",
									"                \"type\":\"string\"",
									"            }",
									"        }",
									"    }",
									"    pm.response.to.have.jsonSchema(expectedSchema);",
									"});",
									"pm.test(\"task should have the given id\", function () {",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"task_id\"))",
									"});",
									"",
									"pm.test(\"Content-Type should exist and should contain application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks/{{task_id}}",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"{{task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get an active task negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"task should have a valid id\", function () {",
									"    pm.response.to.have.body(\"Not Found\\n\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks/123",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"123"
							]
						}
					},
					"response": []
				},
				{
					"name": "update a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"updated\",\n    \"description\": \"hello2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks/{{task_id}}",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"{{task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update a task negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"test should not be updated with empty fields\", function () {",
									"    pm.response.to.have.body(\"At least one of supported fields should be set and non-empty\\n\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks/{{task_id}}",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"{{task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "close a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks/{{task_id}}/close",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"{{task_id}}",
								"close"
							]
						}
					},
					"response": []
				},
				{
					"name": "close a task negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"response should be 404 not found\", function () {",
									"    pm.response.to.have.body(\"404 page not found\\n\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks/{{task_id}}/closed",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"{{task_id}}",
								"closed"
							]
						}
					},
					"response": []
				},
				{
					"name": "reopen a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks/{{task_id}}/reopen",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"{{task_id}}",
								"reopen"
							]
						}
					},
					"response": []
				},
				{
					"name": "reopen a task negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response should be 404 not found\", function () {",
									"    pm.response.to.have.body(\"404 page not found\\n\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks/{{task_id}}/reopens",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"{{task_id}}",
								"reopens"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasks/{{task_id}}",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"{{task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete a task negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"response should be 404 not found\", function () {",
									"    pm.response.to.have.body(\"404 page not found\\n\");",
									"});",
									"pm.environment.set(\"task_id\",\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.todoist.com/rest/v1/tasksd/{{task_id}}",
							"protocol": "https",
							"host": [
								"api",
								"todoist",
								"com"
							],
							"path": [
								"rest",
								"v1",
								"tasksd",
								"{{task_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response time is less than 700ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(700);",
					"});"
				]
			}
		}
	]
}